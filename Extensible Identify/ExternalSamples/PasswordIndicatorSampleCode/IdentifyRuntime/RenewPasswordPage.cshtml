
@using System.Web.Mvc
@using System.Web.Mvc.Html
@using Resources
@{
    ViewBag.Title = "";
}

@section TitleHeader{
    @*Renew Password Page*@
    @UserNamePasswordResources.UserNamePasswordRenewPasswordPageTitle
}

@section InitScript{
    <script src="~/Scripts/zxcvbn.js"></script>
}

@section MainContent{

    <div class="form-box">
        <div class="form-top">
            <div class="form-top-left text-left">
                <h4>
                    @UserNamePasswordResources.UserNamePasswordToRenewInsertNewPasswordLabel
                </h4>
                <div class="small">
                    <text>@ViewData["PasswordPolicy"]</text>
                </div>
            </div>
        </div>
        <div class="form-bottom">
            @using (Html.BeginForm("RenewPassword", "ResetPassword", FormMethod.Post, new { id = "resetPassword" }))
            {
                @Safewhere.Web.Mvc.Security.HtmlHelper.AntiForgeryToken()

                if (ViewData["ErrorMessage"] != null)
                {
                    <div class="form-group small">
                        <span for="errorMessageLb" class="text-danger">
                            @ViewData["ErrorMessage"]
                        </span>
                    </div>
                }

                <div class="form-group">
                    <label class="sr-only" for="form-password">@UserNamePasswordResources.UserNamePasswordPasswordLabel</label>
                    <input id="password" type="password" name="password" placeholder="@UserNamePasswordResources.UserNamePasswordPasswordLabel..." class="form-password form-control required" id="form-password">
                </div>
                <div id="password-strength-indicator"></div>

                <div class="form-group">
                    <label class="sr-only" for="form-password">@UserNamePasswordResources.UserNamePasswordRepeatPasswordLabel</label>
                    <input type="password" name="repeatPassword" placeholder="@UserNamePasswordResources.UserNamePasswordRepeatPasswordLabel..." class="form-password form-control required" id="form-password">
                    @Html.Hidden("requestId", ViewData["RequestId"])
                </div>

                <div class="form-group">
                    <button id="btnOK" type="submit" class="btn" disabled >@UserNamePasswordResources.ForgotPasswordPage_OK</button>
                </div>
            }
        </div>
    </div>
    <script type="text/javascript" language="JavaScript">

        const MINIMUM_SCORE = 2;
        const passwordInput = document.getElementById('password');
        const passwordStrengthIndicator = document.getElementById('password-strength-indicator');
        const btnOK = document.getElementById('btnOK');

        var result;
        passwordInput.addEventListener('input', () => {
            const password = passwordInput.value;
            result = zxcvbn(password);

            // Update the password strength indicator
            passwordStrengthIndicator.textContent = `Password Strength: ${result.score}/4`;
            // You can also provide feedback to the user based on the score
            if (result.score === 0) {
                passwordStrengthIndicator.style.color = 'red';
                passwordStrengthIndicator.textContent += ' (Very Weak)';
            } else if (result.score === 1) {
                passwordStrengthIndicator.style.color = 'orange';
                passwordStrengthIndicator.textContent += ' (Weak)';
            } else if (result.score === 2) {
                passwordStrengthIndicator.style.color = 'yellow';
                passwordStrengthIndicator.textContent += ' (Fair)';
            } else if (result.score === 3) {
                passwordStrengthIndicator.style.color = 'lightgreen';
                passwordStrengthIndicator.textContent += ' (Strong)';
            } else if (result.score === 4) {
                passwordStrengthIndicator.style.color = 'green';
                passwordStrengthIndicator.textContent += ' (Very Strong)';
            }

            // You can also provide feedback to the user based on the score
            if (result.score >= MINIMUM_SCORE) {
                btnOK.disabled = false;
            } else {
                btnOK.disabled = true;
            }

        });

        // Get a reference to the form
        const resetPasswordForm = document.getElementById("resetPassword");
        // Add an event listener to the form to handle form submission
        resetPasswordForm.addEventListener("submit", function (event) {
            // Prevent the form from submitting
            event.preventDefault();

            if (result !== undefined && result.score >= MINIMUM_SCORE) {
                resetPasswordForm.submit();
            } else {
                alert("Sorry, the password you entered does not meet our password strength requirements. Please choose a stronger password.");
            }
        });
    </script>
}
